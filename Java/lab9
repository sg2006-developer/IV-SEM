Write a JAVA program which has
i. An Interface class for Stack Operations
ii. A Class that implements the Stack Interface and creates a fixed length Stack.
iii. A Class that implements the Stack Interface and creates a Dynamic length Stack.
iv. A Class that uses both the above Stacks through Interface reference and does the
Stack operations that demonstrates the runtime binding.
i. An Interface class for Stack Operations
interface StackOperations {
void push(int item);
int pop();
boolean isEmpty();
boolean isFull();
}
ii. A Class that implements the Stack Interface and creates a fixed length Stack.
// Class that implements the Stack Interface and creates a fixed-length Stack
class FixedLengthStack implements StackOperations {
private int[] stack;
private int top;
private int capacity;
public FixedLengthStack(int size) {
stack = new int[size];
capacity = size;
top = -1;
}
public void push(int item) {
if (isFull()) {
System.out.println("Stack Overflow");
return;
}
stack[++top] = item;
}
public int pop() {
if (isEmpty()) {
System.out.println("Stack Underflow");
return -1;
}
return stack[top--];
}
public boolean isEmpty() {
return top == -1;
}
public boolean isFull() {
return top == capacity - 1;
}
}
iii. A Class that implements the Stack Interface and creates a Dynamic length Stack.
class DynamicLengthStack implements StackOperations {
private int[] stack;
private int top;
private int capacity;
public DynamicLengthStack(int size) {
stack = new int[size];
capacity = size;
top = -1;
}
public void push(int item) {
if (isFull()) {
resizeStack();
}
stack[++top] = item;
System.out.println(“Item pushed : “+item);
}
public int pop() {
if (isEmpty()) {
System.out.println("Stack Underflow");
return -1;
}
return stack[top--];
}
public boolean isEmpty() {
return top == -1;
}
public boolean isFull() {
return top == capacity - 1;
}
private void resizeStack() {
int[] newStack = new int[capacity * 2];
System.arraycopy(stack, 0, newStack, 0, capacity);
capacity *= 2;
System.out.println(“Stach size resized to : “ +capacity);
stack = newStack;
}
}
iv. A Class that uses both the above Stacks through Interface reference and does the
Stack operations that demonstrates the runtime binding.
public class StackDemo {
public static void main(String[] args) {
StackOperations fixedStack = new FixedLengthStack(5);
StackOperations dynamicStack = new DynamicLengthStack(5);
System.out.println("Using Fixed Length Stack:");
testStack(fixedStack);
System.out.println("\nUsing Dynamic Length Stack:");
testStack(dynamicStack);
}
public static void testStack(StackOperations stack) {
stack.push(1);
stack.push(2);
stack.push(3);
stack.push(4);
stack.push(5);
stack.push(6); // This will show overflow for fixed stack and resize for dynamic stack
System.out.println("Popping elements from stack:");
while (!stack.isEmpty()) {
System.out.println(stack.pop());
}
}
}